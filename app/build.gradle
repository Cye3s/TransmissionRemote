apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 20
        versionName '0.9.13'
        applicationId 'net.yupol.transmissionremote.app'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        manifestPlaceholders = [fabricApiKey: "${apiKey('fabric_api_key')}"]
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            lintOptions {
                disable 'MissingTranslation'
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    dataBinding {
        enabled true
    }
}

dependencies {
    implementation project(':model')
    implementation project(':transport')
    implementation project(':utils')

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "androidx.core:core-ktx:$ktx_version"

    // Support Library
    implementation "com.android.support:appcompat-v7:$support_version"
    implementation "com.android.support:support-v4:$support_version"
    implementation "com.android.support:recyclerview-v7:$support_version"
    implementation "com.android.support:design:$support_version"

    // Dagger 2
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"

    // Moshi
    implementation "com.squareup.moshi:moshi:$moshi_version"
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    implementation "com.serjltt.moshi:moshi-lazy-adapters:$moshi_lazy_adapters_version"

    // Guava
    implementation "com.google.guava:guava:$guava_version"

    // Apache Commons
    implementation 'org.apache.commons:commons-io:1.3.2'
    implementation 'org.apache.commons:commons-lang3:3.4'

    // GSON
    implementation "com.google.code.gson:gson:$gson_version"

    // Material Drawer
    implementation('com.mikepenz:materialdrawer:4.6.4@aar') {
        transitive = true
    }

    // Iconics
    implementation "com.mikepenz:iconics-core:$iconics_version"
    implementation "com.mikepenz:iconics-views:2.9.2@aar"
    implementation 'com.mikepenz:google-material-typeface:3.0.1.1.original@aar'
    implementation 'com.mikepenz:fontawesome-typeface:4.7.0.1@aar'
    implementation 'com.mikepenz:community-material-typeface:1.9.32.2@aar'
    implementation 'com.mikepenz:ionicons-typeface:2.0.1.3@aar'

    // Indeterminate Checkbox
    implementation 'com.github.sevar83:indeterminate-checkbox:1.0.5@aar'

    // Crashlytics
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.2@aar') {
        transitive = true
    }

    // Permissions Dispatcher
    implementation 'com.github.hotchemi:permissionsdispatcher:2.2.0'
    kapt 'com.github.hotchemi:permissionsdispatcher-processor:2.2.0'

    // Floating Action Button
    implementation 'com.getbase:floatingactionbutton:1.10.1'

    // Evernote Android Job
    implementation 'com.evernote:android-job:1.2.2'

    // Timber
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Butter Knife
    implementation "com.jakewharton:butterknife:$butterknife_version"
    kapt "com.jakewharton:butterknife-compiler:$butterknife_version"

    // Testing
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.assertj:assertj-core:$assertj_version"
}

def property(String fileName, String propertyName) {
    def propsFile = rootProject.file(fileName)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propertyName] != null) {
            return props[propertyName]
        } else {
            throw new GradleException("There is no '" + propertyName + "' property in '" + propsFile.name + "' file")
        }
    } else {
        throw new GradleException("'" + propsFile.name + "' file does not exist")
    }
}

def apiKey(String name) {
    return property("api_keys.properties", name)
}
